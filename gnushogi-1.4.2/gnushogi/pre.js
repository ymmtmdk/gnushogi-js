// Generated by CoffeeScript 1.11.1
(function() {
  "use strict";
  var dequeueStdin, fgetsHook, globalObj, outputHandler, pollHook, pushStdin, stdinQueue, stdinWrite, stdoutBuffer;

  globalObj = (this || 0).self || global;

  if (globalObj.Module == null) {
    globalObj.Module = {
      preRun: []
    };
  }

  stdoutBuffer = "";

  stdinQueue = [];

  pushStdin = (function(_this) {
    return function(str) {
      return stdinQueue.push(str);
    };
  })(this);

  dequeueStdin = (function(_this) {
    return function() {
      return stdinQueue.splice(0, 1)[0];
    };
  })(this);

  globalObj.onmessage = (function(_this) {
    return function(e) {
      if (e.data.stdin) {
        return stdinWrite(e.data.stdin);
      }
    };
  })(this);

  stdinWrite = pushStdin;

  fgetsHook = function(buf_idx, n, stream) {
    var result;
    if (stream !== 1) {
      return {
        hasResult: false,
        result: null
      };
    }
    result = EmterpreterAsync.handle(function(resume) {
      var res;
      res = function() {
        var i, j, ref, str;
        str = dequeueStdin();
        for (i = j = 0, ref = str.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          HEAP8[buf_idx + i] = str.charCodeAt(i);
        }
        return buf_idx;
      };
      if (stdinQueue.length > 0) {
        return resume(res);
      } else {
        return stdinWrite = function(str) {
          stdinWrite = pushStdin;
          pushStdin(str);
          return resume(res);
        };
      }
    });
    return {
      hasResult: true,
      result: result
    };
  };

  pollHook = function(fds, nfds, timeout) {
    return {
      hasResult: true,
      result: 0
    };
  };

  outputHandler = function(chr) {
    if (chr) {
      stdoutBuffer += String.fromCharCode(chr);
      if (chr !== 0x0a) {
        return;
      }
    }
    globalObj.postMessage({
      stdout: stdoutBuffer
    });
    return stdoutBuffer = "";
  };

  Module.preRun.push(function() {
    if (FS.init.initialized) {
      return;
    }
    Module.fgetsHook = fgetsHook;
    Module.pollHook = pollHook;
    return FS.init(null, outputHandler);
  });

}).call(this);

//# sourceMappingURL=pre.js.map
